<div class="paragraph"><p>The Modified Hexadecimal encoding scheme was invented to cope with potential keyboard mapping ambiguities, namely the inconstant locations of keys between different keyboard layouts. YubiKey OTP uses this special data encoding format known as <em>modhex</em> rather than normal hex encoding or base64 encoding. Modhex is similar to hex encoding but with a different encoding alphabet. The reason is to achieve a keyboard layout independent encoding.</p></div>
<script src="knockout-3.2.0.js"></script>
<style>
.block label { display: inline-block; width: 90px; margin-right: 10px; text-align: right; font-weight: 700; }
input.invalid:focus, input[type].invalid:focus {   
    border-color: rgba(219, 63, 66, 0.8);
    box-shadow: 0 1px 1px rgba(219, 63, 66, 0.075) inset, 0 0 8px rgba(219, 63, 66, 0.6);
    outline: 0 none;
}
</style>
<div class="block">
<label for="input">Input</label>
<input id="input" data-bind="textInput: input"></input>
</div>
<div class="block">
<label for="format">Format</label>
<select id="format" data-bind="options: opts, value: format"></select>
</div>
<br>
<div class="block">
<label>Modhex</label>
<span data-bind="text: modhex"></span>
</div>
<div class="block">
<label>Hexadecimal</label>
<span data-bind="text: hex"></span>
</div>
<div class="block">
<label>Decimal</label>
<span data-bind="text: decimal"></span>
</div>
<script type="text/javascript">
// Written by Dan Vanderkam @ http://www.danvk.org/hex2dec.html
/**
 * A function for converting hex <-> dec w/o loss of precision.
 *
 * The problem is that parseInt("0x12345...") isn't precise enough to convert
 * 64-bit integers correctly.
 *
 * Internally, this uses arrays to encode decimal digits starting with the least
 * significant:
 * 8 = [8]
 * 16 = [6, 1]
 * 1024 = [4, 2, 0, 1]
 */

// Adds two arrays for the given base (10 or 16), returning the result.
// This turns out to be the only "primitive" operation we need.
function add(x, y, base) {
  var z = [];
  var n = Math.max(x.length, y.length);
  var carry = 0;
  var i = 0;
  while (i < n || carry) {
    var xi = i < x.length ? x[i] : 0;
    var yi = i < y.length ? y[i] : 0;
    var zi = carry + xi + yi;
    z.push(zi % base);
    carry = Math.floor(zi / base);
    i++;
  }
  return z;
}

// Returns a*x, where x is an array of decimal digits and a is an ordinary
// JavaScript number. base is the number base of the array x.
function multiplyByNumber(num, x, base) {
  if (num < 0) return null;
  if (num == 0) return [];

  var result = [];
  var power = x;
  while (true) {
    if (num & 1) {
      result = add(result, power, base);
    }
    num = num >> 1;
    if (num === 0) break;
    power = add(power, power, base);
  }

  return result;
}

function parseToDigitsArray(str, base) {
  var digits = str.split('');
  var ary = [];
  for (var i = digits.length - 1; i >= 0; i--) {
    var n = parseInt(digits[i], base);
    if (isNaN(n)) return null;
    ary.push(n);
  }
  return ary;
}

function convertBase(str, fromBase, toBase) {
  var digits = parseToDigitsArray(str, fromBase);
  if (digits === null) return null;

  var outArray = [];
  var power = [1];
  for (var i = 0; i < digits.length; i++) {
    // invariant: at this point, fromBase^i = power
    if (digits[i]) {
      outArray = add(outArray, multiplyByNumber(digits[i], power, toBase), toBase);
    }
    power = multiplyByNumber(fromBase, power, toBase);
  }

  var out = '';
  for (var i = outArray.length - 1; i >= 0; i--) {
    out += outArray[i].toString(toBase);
  }
  return out;
}

function decToHex(decStr) {
  var hex = convertBase(decStr, 10, 16);
  return hex ? hex : null;
}

function hexToDec(hexStr) {
  if (hexStr.substring(0, 2) === '0x') hexStr = hexStr.substring(2);
  hexStr = hexStr.toLowerCase();
  return convertBase(hexStr, 16, 10);
}

</script>
<script>
var ALPHABET = 'cbdefghijklnrtuv';
var trans = ALPHABET.split("");

/*** Modhex ***/
function fromModhex(s) {
	bytes = [];  
	toggle = false;
	keep = 0;

	for (i = 0; i < s.length; i++) {
		ch = s.substring(i, i+1);
		n = ALPHABET.indexOf(ch);
		if (n == -1) {
			throw s + " is not properly encoded";
		}
		toggle = !toggle;
		if (toggle) {
			keep = n;
		} else {
			bytes.push((keep << 4) | n);
		}
	}
	return bytes;
}

function toModhex(data) {
	result = "";
	for (i = 0; i < data.length; i++) {
		result += trans[(data[i] >> 4) & 0xf];
		result += trans[data[i] & 0xf];
	}
	return result;
}

/*** Hex ***/
function fromHex(hex) {
	if (! /^[a-fA-F0-9]+$/.test(hex)) {
		throw "Invalid characters in hex input.";
	}

	if(hex.length % 2) {
		hex = "0" + hex
	}
	for (var bytes = [], c = 0; c < hex.length; c += 2) {
		bytes.push(parseInt(hex.substr(c, 2), 16));
	}
	return bytes;
}

function toHex(bytes) {
	for (var hex = [], i = 0; i < bytes.length; i++) {
		hex.push((bytes[i] >>> 4).toString(16));
		hex.push((bytes[i] & 0xF).toString(16));
	}
	return hex.join("");
}

function toBytes(format, value) {
	switch(format) {
		case "Decimal":
			return fromHex(decToHex(value));
		case "Hexadecimal":
			return fromHex(value);
		default:
			return fromModhex(value);
	}
}

var ViewModel = function() {
    this.input = ko.observable();
    this.format = ko.observable();
	this.opts = self.myOpts = ko.observableArray(["Modhex", "Hexadecimal", "Decimal"]);
 
    this.bytes = ko.computed(function() {
		if(!this.input()) { return [] }
		try {
			var bytes = toBytes(this.format(), this.input());
			document.getElementById("input").classList.remove("invalid");
			return bytes;
		} catch (err) {
			document.getElementById("input").classList.add("invalid");
		}
    }, this); 
	this.hex = ko.computed(function() { return toHex(this.bytes()) }, this);
	this.decimal = ko.computed(function() { return hexToDec(this.hex()) }, this);
	this.modhex = ko.computed(function() { return toModhex(this.bytes()) }, this);
};

ko.applyBindings(new ViewModel());
</script>
